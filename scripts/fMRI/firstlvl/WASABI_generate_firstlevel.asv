% canlab_glm_subject_levels_BIDS
% A wrapper for running first-level GLMs on a BIDS derivative directory
% with preproc_bold.nii.gz files, using canlab_glm_subject_levels.

% The logic of first-level GLM in WASABI is that first-level beta estimates
% should be estimated for each subject's session-level to best manage
% storage space and computational time concerns.


% Does 2 Things:
% 1. Plots a Session-Montage Comparison
% 2. a. Generates a DSGN structure for each session
%    b. Create an fmri_data object from these task scans and compare the
%       mean EPIs across the run for the task.
%   c. Save all your files.


% Start a log
% diary(fullfile('firstlvl_generate_2.log');
% 
% 
% subs=canlab_list_subjects(firstlvl_derivdir, 'sub-*');
% 
% for sub=1:numel(subs)
%     sess{sub}=canlab_list_subjects(fullfile(firstlvl_derivdir, subs{sub}), 'ses-*');
% end
% 
% tasks=dir('task-*');
% tasks=erase({tasks}, {'task-','.json'});
% 
% % Build a FUNCS structure
% FUNCS.tasks=tasks;
% FUNCS.subjects=subs;
% FUNCS.sessions=sess;
% % FUNCS.runs=runs;
% FUNCS.funcs;


%% Debugging
if ~ismac() & ~ispc()
    root = '/dartfs-hpc/rc/lab/C/CANlab/';
    addpath(genpath([root, '/modules/spm12']));
    addpath(genpath([root, '/labdata/projects/WASABI/software']));  % I put all of my tools in this folder.
end

derivdir='\\dartfs-hpc\rc\lab\C\CANlab\labdata\data\WASABI\derivatives'
fmriprep_derivdir='\\dartfs-hpc\rc\lab\C\CANlab\labdata\data\WASABI\derivatives\fmriprep'
bidsroot='\\dartfs-hpc\rc\lab\C\CANlab\labdata\data\WASABI\1080_wasabi'
if isunix
    fmriprep_derivdir=strrep(fmriprep_derivdir, '\', '/')
    bidsroot=strrep(bidsroot, '\', '/')
end

space='MNI152NLin2009cAsym'
tasks={'bodymap' 'movemap' 'acceptmap' 'distractmap' 'pinellocalizer'}

firstlvl_derivdir = fullfile(fileparts(fmriprep_derivdir), 'canlab_firstlvl')

subs = canlab_list_subjects(firstlvl_derivdir, 'sub-*');

spike_def='fmriprep';
spike_def='CANlab';


t=1
sub=1
ses=3

sessions=canlab_list_subjects(fullfile(firstlvl_derivdir, subs{sub}), 'ses-*');

function WASABI_genfirstlvlDSGNs(fmriprep_derivdir, bidsroot, spike_def, omit_spike_trials, spikes_percent_threshold, vif_thresh, movement_reg_quadratic, subjs2analyze, dvars_threshold, spike_additional_vols, pmod_polynom, pmod_name, pmod_ortho_off, pmod_type, plotdesign, plotmontages, input_threshold, thresh_type, k, mask, varargin)
    % Step 1: Put in a firstlvl_derivdir full path.
    % Step 2: 

    if ~exist(fmriprep_derivdir, 'dir')
        error('No fmriprep directory named fmriprep...Cannot find or create firstlvl_derivdir. Run canlab_prep_bidsdir() first to create a first level directory.');
    else
        firstlvl_derivdir = fullfile(fileparts(fmriprep_derivdir), 'canlab_firstlvl')
        if ~exist(firstlvl_derivdir, 'dir')
            warning('no canlab_firstlvl directory found. Creating one from fmriprep derivatives.')
            canlab_prep_bidsdir(fmriprepdir, 'datatype', 'func', 'outdir', firstlvl_derivdir);
        end
    end


    % Parse varargin for task, space, and subs
    p = inputParser;
    addOptional(p, 'task', '', @ischar);
    addOptional(p, 'space', 'MNI152NLin2009cAsym', @ischar);
    addOptional(p, 'subs', {}, @iscell);
    parse(p, varargin{:});

    task = p.Results.task;
    space = p.Results.space;
    subs = p.Results.subs;

    % Defaults for tasks
    tasks = dir(fullfile(bidsroot, 'task-*'));
    tasks = extractBetween({tasks.name}, 'task-', '_');
    if isempty(tasks(contains(tasks, task)))
        error(['No tasks identified with keyword ' task]);
    else
        if ~iscell(task)
            tasks={task};
        else
            tasks=task;
        end
    end


    % Default for subs if not provided
    if isempty(subs)
        subs = canlab_list_subjects(firstlvl_derivdir, 'sub-*');
    end

    % Define the list of allowed templateflow standard spaces
    allowedSpaces = {'MNI152Lin', 'MNI152NLin2009cAsym', 'MNI152NLin6Asym', ...
                     'MNI152NLin6Sym', 'MNIInfant', 'MNIPediatricAsym', ...
                      'NKI', 'OASIS30ANTs', 'PNC', 'fsLR', 'fsaverage', ...
                      'anat', 'T1w', 'run', 'func', 'sbref', 'fsnative', ...
                      'template', 'fsnative', 'fsaverage6', 'fsaverage5'}; 
                        % Add all required standard spaces here
    
    % Check if provided space is one of the allowed spaces
    if ~ismember(space, allowedSpaces)
        error('The specified space "%s" is not one of the allowed templateflow standard spaces.', space);
    end

    % MANDATORY REQUIRED
    spike_def = 'fMRIprep';
    spike_def = 'CANlab';
    omit_spike_trials = 'no';
    spikes_percent_threshold=0.15;
    vif_thresh=2;
    movement_reg_quadratic = true; % change to false if you don't want to add quadratic terms for movement parameters and their first-order derivatives
    
    % REQUIRED IF YOU HAVE PARAMETRIC MODULATORS
    pmods.pmod_polynom = 1;
    pmods.pmod_name = 'rating';
    pmods.pmod_ortho_off = false;
    pmods.pmod_type = 'parametric_standard';
    
    % SPIKE OPTIONS
    spikes.dvars_threshold = 2; % REQUIRED if spike_def = 'CANlab'
    spikes.spike_additional_vols=0; % OPTIONAL, NOT RECOMMENDED TO TURN ON

    % OPTIONAL
    subjs2analyze = {}; % enter subjects separated by comma if you only want to analyze selected subjects e.g. {'sub-01','sub-02'}; THIS IS NOT YET FULLY IMPLEMENTED HENCE LEAVE CELL ARRAY EMPTY OR COMMENT OUT OR DO NOT SPECIFY FIELD AT ALL
    bySubject = true; % true if you want to fit many sessions within subject, one subject at a time.

    % OPTIONS FOR PLOTTTING, AND THRESHOLDING AND MASKING FIRST LEVEL IMAGES FOR DISPLAY
    display.plotruncomparison = true;
    display.plotdesign = true; % NOT RECOMMENDED TO TURN OFF
    display.plotmontages = true; % NOT RECOMMENDED TO TURN OFF
    display.input_threshold = 0.005;
    display.thresh_type = 'unc';
    display.k = 25;
    display.mask = which('gray_matter_mask_sparse.img');
    
    % THE ABOVE OPTIONS CAN BE CONSIDERED LABGAS DEFAULTS, BUT MAY BE
    % STUDY-SPECIFIC, SO DISCUSS WITH LUKAS IF IN DOUBT!
    if strcmpi(spike_def,'CANlab')==1 && ~isfield(spikes,'dvars_threshold')
        error('spike_def option %s requires specification of spikes.dvars_threshold, please specify before proceeding', mandatory.spike_def)
    end





    if bySubject
        parfor sub = 1:numel(subs)
            sessions=canlab_list_subjects(fullfile(firstlvl_derivdir, subs{sub}), 'ses-*');

            % DSGN_process_job(tasks)
            for ses=1:numel(sessions)
                for t = 1:numel(tasks)

                    % This line collects functional images from a single subject's session
                    funcs=dir(fullfile(firstlvl_derivdir, subs{sub}, sessions{ses},'func', '**', ['*',tasks{t},'*desc-preproc_bold*']));
                    fnames=fullfile({funcs(:).folder}', {funcs(:).name}');
                    % If files identified are .gz files, unzip them first.
                    if any(contains(fnames, '.gz'))
                        gzfuncs=fnames(find(contains(fnames, '.gz')));
                        for g = 1:numel(gzfuncs)
                            if ~exist(erase(gzfuncs{g}, '.gz'), 'file')
                                fprintf('No unzipped .nii for %s: Unzipping...', gzfuncs{g});
                                gunzip(gzfuncs);
                            end
                        end
                    end
                    % Now ensure that the funcs collecting are *.nii only
                    % our first-level scripts don't work with .nii.gz
                    % files.
                    funcs=dir(fullfile(firstlvl_derivdir, subs{sub}, sessions{ses},'func', '**', ['*',tasks{t},'*desc-preproc_bold.nii']));
                        
                    if ~isempty(funcs) % If there are scans that pertain to the task
                        % 1. Generate a DSGN structure for that task.
                        % If running one subject's session at a time, print some feedback:
                        [subject, session, run, ~] = getBIDSSubSesRunTask(funcs(1).name);
                        disp(['Currently processing sub-', subject, '_ses-',session,'_run-',run, '_task-', tasks{t}]);
                        DSGN=generateDSGN(funcs, firstlvl_derivdir, fmriprep_derivdir, tasks{t}, spike_def, 0);
                    else
                        % If there is no matching task, then display this message:
                        disp(['No ', tasks{t}, ' runs for ', subs{sub}, ' session ', num2str(ses)]);
                    end
                
                    close all;
                end
            
            end
        end


    else
        % DSGN_process_job(tasks)
        for t = 1:numel(tasks)
            % This line would collect functional images from every subject
            funcs=dir(fullfile(firstlvl_derivdir, '**','func', '**', ['*',tasks{t},'*desc-preproc_bold*']));
            fnames=fullfile({funcs(:).folder}', {funcs(:).name}');
            % If files identified are .gz files, unzip them first.
            if any(contains(fnames, '.gz'))
                gzfuncs=fnames(find(contains(fnames, '.gz')));
                for g = 1:numel(gzfuncs)
                    if ~exist(erase(gzfuncs{g}, '.gz'), 'file')
                        fprintf('No unzipped .nii for %s: Unzipping...', gzfuncs{g});
                        gunzip(gzfuncs);
                    end
                end
            end
            % Now ensure that the funcs collecting are *.nii only
            % our first-level scripts don't work with .nii.gz
            % files.
            funcs=dir(fullfile(firstlvl_derivdir, subs{sub}, sessions{ses},'func', '**', ['*',tasks{t},'*desc-preproc_bold.nii']));      
            
            if ~isempty(funcs) % If there are scans that pertain to the task
                % Generate a DSGN structure for that task.
                % Print some feedback:
                disp(['Currently processing task-', tasks{t}]);
                DSGN=generateDSGN(funcs, firstlvl_derivdir, fmriprep_derivdir, tasks{t}, spike_def, 1);
            else
                % If there is no matching task, then display this message:
                disp(['No ', tasks{t}, ' runs detected in this study.']);
        
            end
        
            close all;
        
        end
    end

end

% diary off;